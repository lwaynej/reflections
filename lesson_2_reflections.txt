What happens when you initialize a repository? Why do you need to do it?

The repository was created in a hidden directory called .git. This is required
so that Git can create an empty repository.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

The stagging area sits between the working directory files and the repository. It
is an area that allows you to setup your commit so that you can see what it looks
like before you commit it. It gives you the opportuntity to see what the commit will
look like before you do it.

How can you use the staging area to make sure you have one commit per logical
change?

After adding changes to the staging area I can use 'git diff --staged' to make sure
that only changes related to a single logical commit are going to be in the commit.
Changes can be added and removed from the staging area and once they are exactly 
what I want I can commit them.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

If you need to make different versions of your code you can use branches to track
each of the different versions. Branches are helpful because they allow you to 
give a human readable name to each of the development paths, these names will
group the change history for each path and in the future allow you to merge 
the divergent paths back together.

How do the diagrams help you visualize the branch structure?

Diagrams help visualize the relationships between revisions. They show which
commit belong to each branch and the temporal order. They also show which
commits are common to two or more branches. They show the 'layout' of the 
commits.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

When two branches are merged the git takes all the commits in one branch and 
combines them with the other. The result is then checked into the current branch.
The commits diagram will show all the commits from both branches in chronological
order. If the graph option is used to show the log it will show the two development
paths and the merge so that it's possible to see how the commits were added.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?

Automatic merging is faster and does not require a lot of effort. However,
automatic merging has risks. Git just looks at differences but cannot figure
out intent. Different people may add things the don't overlap in location 
but may not work together. For example two different people can solve the
same problem in two different ways so the when the changes are combined 
something gets done twice and git might not notice the logical conflict.
